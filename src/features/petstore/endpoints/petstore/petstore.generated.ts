/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreatePetsBodyItem,
  Error,
  ListPetsParams,
  Pet,
  Pets,
} from "../../models";

import { customFetch } from "../../../../functions/custom-fetch";

export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx =
  | 400
  | 401
  | 402
  | 403
  | 404
  | 405
  | 406
  | 407
  | 408
  | 409
  | 410
  | 411
  | 412
  | 413
  | 414
  | 415
  | 416
  | 417
  | 418
  | 419
  | 420
  | 421
  | 422
  | 423
  | 424
  | 426
  | 428
  | 429
  | 431
  | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes =
  | HTTPStatusCode1xx
  | HTTPStatusCode2xx
  | HTTPStatusCode3xx
  | HTTPStatusCode4xx
  | HTTPStatusCode5xx;

/**
 * @summary List all pets
 */
export type listPetsResponse200 = {
  data: Pets;
  status: 200;
};

export type listPetsResponseComposite = listPetsResponse200;

export type listPetsResponse = listPetsResponseComposite & {
  headers: Headers;
};

export const getListPetsUrl = (params?: ListPetsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:3000/pets?${stringifiedParams}`
    : `http://localhost:3000/pets`;
};

export const listPets = async (
  params?: ListPetsParams,
  options?: RequestInit,
): Promise<listPetsResponse> => {
  return customFetch<listPetsResponse>(getListPetsUrl(params), {
    ...options,
    method: "GET",
  });
};

/**
 * @summary Create a pet
 */
export type createPetsResponse200 = {
  data: Pet;
  status: 200;
};

export type createPetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type createPetsResponseComposite =
  | createPetsResponse200
  | createPetsResponseDefault;

export type createPetsResponse = createPetsResponseComposite & {
  headers: Headers;
};

export const getCreatePetsUrl = () => {
  return `http://localhost:3000/pets`;
};

export const createPets = async (
  createPetsBodyItem: CreatePetsBodyItem[],
  options?: RequestInit,
): Promise<createPetsResponse> => {
  return customFetch<createPetsResponse>(getCreatePetsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createPetsBodyItem),
  });
};

/**
 * @summary Update a pet
 */
export type updatePetsResponse200 = {
  data: Pet;
  status: 200;
};

export type updatePetsResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type updatePetsResponseComposite =
  | updatePetsResponse200
  | updatePetsResponseDefault;

export type updatePetsResponse = updatePetsResponseComposite & {
  headers: Headers;
};

export const getUpdatePetsUrl = () => {
  return `http://localhost:3000/pets`;
};

export const updatePets = async (
  pet: Pet,
  options?: RequestInit,
): Promise<updatePetsResponse> => {
  return customFetch<updatePetsResponse>(getUpdatePetsUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(pet),
  });
};

/**
 * @summary Info for a specific pet
 */
export type showPetByIdResponse200 = {
  data: Pet;
  status: 200;
};

export type showPetByIdResponseDefault = {
  data: Error;
  status: Exclude<HTTPStatusCodes, 200>;
};

export type showPetByIdResponseComposite =
  | showPetByIdResponse200
  | showPetByIdResponseDefault;

export type showPetByIdResponse = showPetByIdResponseComposite & {
  headers: Headers;
};

export const getShowPetByIdUrl = (petId: string, testId: string) => {
  return `http://localhost:3000/pets/${petId}/${testId}`;
};

export const showPetById = async (
  petId: string,
  testId: string,
  options?: RequestInit,
): Promise<showPetByIdResponse> => {
  return customFetch<showPetByIdResponse>(getShowPetByIdUrl(petId, testId), {
    ...options,
    method: "GET",
  });
};
